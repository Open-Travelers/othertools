#ifndef _gc_os_h_
#define _gc_os_h_
#include "common.h"
extern unk __OSCurrHeap;
extern unk __OSStartTime;
extern unk __OSInIPL;
extern unk __OSErrorTable;
extern unk __OSLastInterrupt;
extern unk __OSLastInterruptSrr0;
extern unk __OSLastInterruptTime;
extern void OSGetLanguage(void /* TODO */);
extern void OSGetResetButtonState(void /* TODO */);
extern void OSReport(void /* TODO */);
extern void OSResetSystem(void /* TODO */);
extern void OSGetTick(void /* TODO */);
extern void OSPanic(void /* TODO */);
extern void OSInit(void /* TODO */);
extern void OSAllocFromHeap(void /* TODO */);
extern void OSGetArenaLo(void /* TODO */);
extern void OSGetArenaHi(void /* TODO */);
extern void OSSetArenaLo(void /* TODO */);
extern void OSInitAlloc(void /* TODO */);
extern void OSCreateHeap(void /* TODO */);
extern void OSSetCurrentHeap(void /* TODO */);
extern void OSFreeToHeap(void /* TODO */);
extern void OSDisableInterrupts(void /* TODO */);
extern void OSRestoreInterrupts(void /* TODO */);
extern void OSGetTime(void /* TODO */);
extern void OSTicksToCalendarTime(void /* TODO */);
extern void OSCheckHeap(void /* TODO */);
extern void OSReferentSize(void /* TODO */);
extern void OSSaveFPUContext(void /* TODO */);
extern void OSLoadFPUContext(void /* TODO */);
extern void OSGetConsoleType(void /* TODO */);
extern void __OSEVSetNumber(void /* TODO */);
extern void __OSEVStart(void /* TODO */);
extern void __OSEVEnd(void /* TODO */);
extern void __OSDBINTSTART(void /* TODO */);
extern void __OSDBINTEND(void /* TODO */);
extern void __OSDBJUMPSTART(void /* TODO */);
extern void __OSDBJUMPEND(void /* TODO */);
extern void OSDefaultExceptionHandler(void /* TODO */);
extern void __OSSetExceptionHandler(void /* TODO */);
extern void __OSGetExceptionHandler(void /* TODO */);
extern void __OSPSInit(void /* TODO */);
extern void __OSGetDIConfig(void /* TODO */);
extern void OSGetResetCode(void /* TODO */);
extern void __OSGetSystemTime(void /* TODO */);
extern void OSSetArenaHi(void /* TODO */);
extern void __OSInitSystemCall(void /* TODO */);
extern void OSInitAlarm(void /* TODO */);
extern void __OSModuleInit(void /* TODO */);
extern void __OSInterruptInit(void /* TODO */);
extern void __OSResetSWInterruptHandler(void /* TODO */);
extern void __OSSetInterruptHandler(void /* TODO */);
extern void __OSContextInit(void /* TODO */);
extern void __OSCacheInit(void /* TODO */);
extern void __OSInitSram(void /* TODO */);
extern void __OSThreadInit(void /* TODO */);
extern void __OSInitAudioSystem(void /* TODO */);
extern void __OSInitMemoryProtection(void /* TODO */);
extern void OSEnableInterrupts(void /* TODO */);
extern void __OSUnhandledException(void /* TODO */);
extern void OSCreateAlarm(void /* TODO */);
extern void OSSetAlarm(void /* TODO */);
extern void OSCancelAlarm(void /* TODO */);
extern void OSLoadContext(void /* TODO */);
extern void OSDisableScheduler(void /* TODO */);
extern void OSClearContext(void /* TODO */);
extern void OSSetCurrentContext(void /* TODO */);
extern void OSEnableScheduler(void /* TODO */);
extern void __OSReschedule(void /* TODO */);
extern void __OSStopAudioSystem(void /* TODO */);
extern void OSDumpContext(void /* TODO */);
extern void OSSetErrorHandler(void /* TODO */);
extern void OSGetCurrentContext(void /* TODO */);
extern void OSSaveContext(void /* TODO */);
extern void OSGetStackPointer(void /* TODO */);
extern void __OSGetInterruptHandler(void /* TODO */);
extern void __OSMaskInterrupts(void /* TODO */);
extern void __OSUnmaskInterrupts(void /* TODO */);
extern void __OSDispatchInterrupt(void /* TODO */);
extern void OSRegisterResetFunction(void /* TODO */);
extern void __OSDoHotReset(void /* TODO */);
extern void __OSSyncSram(void /* TODO */);
extern void OSCancelThread(void /* TODO */);
extern void __OSLockSram(void /* TODO */);
extern void __OSUnlockSram(void /* TODO */);
extern void __OSReboot(void /* TODO */);
extern void __OSLockSramEx(void /* TODO */);
extern void __OSUnlockSramEx(void /* TODO */);
extern void OSGetWirelessID(void /* TODO */);
extern void OSSetWirelessID(void /* TODO */);
extern void __OSSystemCallVectorStart(void /* TODO */);
extern void __OSSystemCallVectorEnd(void /* TODO */);
extern void OSInitThreadQueue(void /* TODO */);
extern void OSGetCurrentThread(void /* TODO */);
extern void __OSGetEffectivePriority(void /* TODO */);
extern void OSWakeupThread(void /* TODO */);
extern void OSSleepThread(void /* TODO */);
extern void OSResumeThread(void /* TODO */);
extern void OSSuspendThread(void /* TODO */);
extern void __OSUnlockAllMutex(void /* TODO */);
extern void OSGetFontEncode(void /* TODO */);
#endif
